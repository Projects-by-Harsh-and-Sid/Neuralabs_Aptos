sequenceDiagram
    title Detailed Chat Interaction with AI Agent/Flow
    
    actor User
    participant Frontend as Client Application
    participant Wallet as Wallet Provider
    participant Backend2 as Neura Message Passer
    participant Blockchain as Aptos Blockchain
    participant Backend1 as Neura Execution Engine
    participant AIService as AI Service (Bedrock)
    participant Database as Database & Storage
    
    %% Initial Authentication & Session Setup
    User->>Frontend: 1. Open AI Chat Interface
    
    %% Authentication Flow
    Frontend->>Wallet: 2. Request Wallet Connection
    Wallet-->>User: 3. Request Permission
    User->>Wallet: 4. Approve Connection
    Wallet-->>Frontend: 5. Return Wallet Address
    Frontend->>Backend2: 6. Authentication Request (address)
    Backend2->>Blockchain: 7. Generate Challenge
    Blockchain-->>Backend2: 8. Challenge Data
    Backend2-->>Frontend: 9. Forward Challenge
    Frontend->>Wallet: 10. Request Signature
    Wallet-->>User: 11. Prompt for Signature
    User->>Wallet: 12. Confirm Signature
    Wallet-->>Frontend: 13. Return Signed Challenge
    Frontend->>Backend2: 14. Send Signed Challenge
    Backend2->>Blockchain: 15. Verify Signature
    Blockchain-->>Backend2: 16. Signature Valid
    
    %% Session Creation
    Backend2->>Database: 17. Create User Session
    Database-->>Backend2: 18. Session Created
    Backend2->>Backend2: 19. Generate JWT Token
    Backend2-->>Frontend: 20. Return JWT + Session Info
    Frontend->>Frontend: 21. Store Token in LocalStorage
    
    %% Access Verification
    Backend2->>Blockchain: 22. Query NFT Access Rights
    Note over Backend2,Blockchain: Check if user has access to requested flow
    Blockchain->>Blockchain: 23. Call smart contract get_access_level()
    Blockchain-->>Backend2: 24. Return Access Level (1-6)
    Backend2->>Backend2: 25. Verify Sufficient Access (â‰¥ Level 1)
    
    %% Fetch Chat History
    Backend2->>Database: 26. Get Previous Conversation Context
    Database-->>Backend2: 27. Return Chat History
    Backend2-->>Frontend: 28. Send Chat History
    Frontend->>Frontend: 29. Display Previous Messages
    
    %% WebSocket Setup for Live Updates
    Frontend->>Backend2: 30. Open WebSocket Connection
    Backend2-->>Frontend: 31. WebSocket Connection Established
    
    %% User Sends Message
    User->>Frontend: 32. Type & Send Message
    Frontend->>Frontend: 33. Show Message in UI
    
    %% Display Typing Indicator
    Frontend->>Frontend: 34. Show Typing Indicator
    
    %% Send Message to Backend
    Frontend->>Backend2: 35. Send Message (POST /chat with JWT)
    Backend2->>Database: 36. Store User Message
    Database-->>Backend2: 37. Message Stored
    
    %% Prepare for Flow Execution
    Backend2->>Database: 38. Fetch Flow Definition
    Database-->>Backend2: 39. Return Flow Definition
    Backend2->>Backend2: 40. Prepare Initial Inputs
    
    %% Backend1 Setup
    Backend2->>Backend1: 41. Request Flow Execution
    Note over Backend2,Backend1: Send flow definition, inputs & stream URL
    Backend1->>Backend1: 42. Initialize Flow Executor
    Backend1->>Backend1: 43. Set Up Element Graph
    
    %% Start WebSocket for Streaming Updates
    Backend1->>Backend2: 44. Open WebSocket Connection
    Backend2-->>Backend1: 45. WebSocket Connection Established
    
    %% Execute Flow - Start
    Backend1->>Backend2: 46. Stream: Flow Started Event
    Backend2->>Frontend: 47. Forward: Flow Started Event
    
    %% Execute Input Elements
    Backend1->>Backend1: 48. Execute Start Element
    Backend1->>Backend2: 49. Stream: Start Element Completed
    Backend2->>Frontend: 50. Forward: Element Update
    
    %% Execute Chat Input Element
    Backend1->>Backend1: 51. Execute Chat Input Element
    Backend1->>Backend2: 52. Stream: Chat Input Processed
    Backend2->>Frontend: 53. Forward: Element Update
    
    %% Execute Context Element
    Backend1->>Backend1: 54. Execute Context History Element
    Backend1->>Backend2: 55. Stream: Context Element Completed
    Backend2->>Frontend: 56. Forward: Element Update
    
    %% Verify Permissions During Execution
    Backend1->>Blockchain: 57. Verify Execution Permission
    Blockchain-->>Backend1: 58. Permission Confirmed
    
    %% Execute AI Element
    Backend1->>Backend1: 59. Execute LLM Element
    
    %% AI Service Interaction
    Backend1->>AIService: 60. Request AI Inference
    AIService->>AIService: 61. Initialize Text Generation
    
    %% Streaming AI Response
    AIService-->>Backend1: 62. Stream: First Token Chunk
    Backend1->>Backend2: 63. Stream: LLM Chunk Event
    Backend2->>Database: 64. Begin Storing Partial Response
    Backend2->>Frontend: 65. Forward: LLM Chunk Event
    Frontend->>Frontend: 66. Update UI with First Chunk
    Frontend->>Frontend: 67. Remove Typing Indicator
    
    %% Continued Streaming (Multiple Chunks)
    loop Token Streaming
        AIService-->>Backend1: 68. Stream: Next Token Chunk
        Backend1->>Backend2: 69. Stream: LLM Chunk Event
        Backend2->>Database: 70. Update Partial Response
        Backend2->>Frontend: 71. Forward: LLM Chunk Event
        Frontend->>Frontend: 72. Update UI Incrementally
    end
    
    %% AI Response Completion
    AIService-->>Backend1: 73. Stream: Final Token Chunk
    AIService-->>Backend1: 74. Generation Complete Signal
    
    %% Execute Output Elements
    Backend1->>Backend1: 75. Process Response Formatting
    Backend1->>Backend1: 76. Execute End Element
    
    %% Flow Completion
    Backend1->>Backend2: 77. Stream: Flow Completed Event
    Backend2->>Database: 78. Finalize Response Storage
    Database-->>Backend2: 79. Storage Confirmed
    Backend2->>Frontend: 80. Forward: Flow Completed Event
    Frontend->>Frontend: 81. Update UI Completion State
    
    %% Close Streaming Connections
    Backend1->>Backend2: 82. Close Streaming Connection
    Backend2-->>Backend1: 83. Connection Closed Confirmation
    
    %% Analytics & Logging
    Backend2->>Database: 84. Store Usage Analytics
    Backend2->>Backend2: 85. Update Rate Limiting Counters
    
    %% Cleanup
    Backend1->>Backend1: 86. Release Resources
    
    %% UI Finalization
    Frontend->>Frontend: 87. Enable Further User Input
    Frontend->>User: 88. Show Completed Response
    
    %% Keep WebSocket Open for Next Message
    Note over Frontend,Backend2: WebSocket remains open for next interaction